{"version":3,"sources":["utility.ts"],"names":["errorsByCode","TwilioError","InvalidArgumentError","constructTwilioError","message","code","ErrorClass","get"],"mappings":"AAAA,SAASA,YAAT,QAA6B,aAA7B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,oBAAT,QAAqC,wBAArC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,oBAAT,CACLC,OADK,EAELC,IAFK,EAGQ;AACb,MAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,UAAM,IAAIF,oBAAJ,CACJ,iDADI,CAAN;AAGD;;AAED,MAAI,OAAOG,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAM,IAAIH,oBAAJ,CACJ,8CADI,CAAN;AAGD;;AAED,QAAMI,UAAU,GAAGN,YAAY,CAACO,GAAb,CAAiBF,IAAjB,CAAnB;AAEA,SAAO,OAAOC,UAAP,KAAsB,WAAtB,GACH,IAAIA,UAAJ,CAAeF,OAAf,CADG,GAEH,IAAIH,WAAJ,CAAgBG,OAAhB,EAAyBC,IAAzB,CAFJ;AAGD","sourcesContent":["import { errorsByCode } from './generated';\nimport { TwilioError } from './TwilioError';\nimport { InvalidArgumentError } from './InvalidArgumentError';\n\n/**\n * Uses the generated error-code map to create the appropriate error.\n * If the code is \"unexpected\" such that there is no constructor for that\n * specific code, this function will default to a generic {@link TwilioError}.\n *\n * @param message an error message\n * @param code a Twilio error code, for example `31209`\n *\n * @returns a {@link TwilioError} or appropriate sub-class\n */\nexport function constructTwilioError(\n  message: string,\n  code: number\n): TwilioError {\n  if (typeof message !== 'string') {\n    throw new InvalidArgumentError(\n      'The \"message\" argument is not of type \"string\".'\n    );\n  }\n\n  if (typeof code !== 'number') {\n    throw new InvalidArgumentError(\n      'The \"code\" argument is not of type \"number\".'\n    );\n  }\n\n  const ErrorClass = errorsByCode.get(code);\n\n  return typeof ErrorClass !== 'undefined'\n    ? new ErrorClass(message)\n    : new TwilioError(message, code);\n}\n"]}