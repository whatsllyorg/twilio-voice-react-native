{"version":3,"sources":["OutgoingCallMessage.ts"],"names":["Constants","NativeEventEmitter","constructTwilioError","CallMessage","OutgoingCallMessage","constructor","content","contentType","messageType","voiceEventSid","nativeCallMessageEvent","type","handler","_nativeEventHandler","Error","getSid","CallEventMessageFailure","message","code","error","emit","Event","Failure","CallEventMessageSent","Sent","_handleFailureEvent","_handleSentEvent","addListener","ScopeCallMessage","_handleNativeEvent","Listener"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,kBAAT,QAAmC,UAAnC;AACA,SAASC,oBAAT,QAAqC,iBAArC;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAkGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAN,SAAkCD,WAAlC,CAA8C;AACnD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AAKEE,EAAAA,WAAW,CAAC;AACVC,IAAAA,OADU;AAEVC,IAAAA,WAFU;AAGVC,IAAAA,WAHU;AAIVC,IAAAA;AAJU,GAAD,EAKe;AACxB,UAAM;AACJH,MAAAA,OADI;AAEJC,MAAAA,WAFI;AAGJC,MAAAA,WAHI;AAIJC,MAAAA;AAJI,KAAN;;AADwB;;AAAA,gDA0BxBC,sBAD2B,IAExB;AACH,YAAM;AAAEC,QAAAA;AAAF,UAAWD,sBAAjB;AAEA,YAAME,OAAO,GAAG,KAAKC,mBAAL,CAAyBF,IAAzB,CAAhB;;AACA,UAAI,OAAOC,OAAP,KAAmB,WAAvB,EAAoC;AAClC,cAAM,IAAIE,KAAJ,CACH,mEAAkEH,IAAK,GADpE,CAAN;AAGD;;AAED,UAAI,KAAKI,MAAL,OAAkBL,sBAAsB,CAACD,aAA7C,EAA4D;AAC1DG,QAAAA,OAAO,CAACF,sBAAD,CAAP;AACD;AACF,KAxCyB;;AAAA,iDA+CxBA,sBAD4B,IAEzB;AACH,UAAIA,sBAAsB,CAACC,IAAvB,KAAgCX,SAAS,CAACgB,uBAA9C,EAAuE;AACrE,cAAM,IAAIF,KAAJ,CACJ,oEACG,IAAGJ,sBAAsB,CAACC,IAAK,EAF9B,CAAN;AAID;;AAED,YAAM;AAAEM,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAAoBR,sBAAsB,CAACS,KAAjD;AACA,YAAMA,KAAK,GAAGjB,oBAAoB,CAACe,OAAD,EAAUC,IAAV,CAAlC;AACA,WAAKE,IAAL,CAAUhB,mBAAmB,CAACiB,KAApB,CAA0BC,OAApC,EAA6CH,KAA7C;AACD,KA3DyB;;AAAA,8CAkExBT,sBADyB,IAEtB;AACH,UAAIA,sBAAsB,CAACC,IAAvB,KAAgCX,SAAS,CAACuB,oBAA9C,EAAoE;AAClE,cAAM,IAAIT,KAAJ,CACJ,iEACG,IAAGJ,sBAAsB,CAACC,IAAK,GAF9B,CAAN;AAID;;AAED,WAAKS,IAAL,CAAUhB,mBAAmB,CAACiB,KAApB,CAA0BG,IAApC;AACD,KA5EyB;;AAQxB,SAAKX,mBAAL,GAA2B;AACzB;AACN;AACA;AACM,OAACb,SAAS,CAACgB,uBAAX,GAAqC,KAAKS,mBAJjB;AAKzB,OAACzB,SAAS,CAACuB,oBAAX,GAAkC,KAAKG;AALd,KAA3B;AAOAzB,IAAAA,kBAAkB,CAAC0B,WAAnB,CACE3B,SAAS,CAAC4B,gBADZ,EAEE,KAAKC,kBAFP;AAID;AAED;AACF;AACA;AACA;;;AA1CqD;AAiGrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MAKcR,K;;aAAAA,K;AAAAA,IAAAA,K;AAAAA,IAAAA,K;KAAAA,K,KAAAA,K;;;;;4BAiBKS,Q,KAAAA,Q,wBAAAA,Q,0BAAAA,Q;GArBF1B,mB,KAAAA,mB","sourcesContent":["/**\n * Copyright Â© 2022 Twilio, Inc. All rights reserved. Licensed under the Twilio\n * license.\n *\n * See LICENSE in the project root for license information.\n */\n\nimport type { TwilioError } from './error';\nimport type {\n  NativeCallMessageEvent,\n  NativeCallMessageEventType,\n  NativeCallMessageInfo,\n} from './type/CallMessage';\nimport { Constants } from './constants';\nimport { NativeEventEmitter } from './common';\nimport { constructTwilioError } from './error/utility';\nimport { CallMessage } from './CallMessage';\n\n/**\n * Defines strict typings for all events emitted by {@link (OutgoingCallMessage:class)\n * | OutgoingCallMessage objects}.\n *\n * @remarks\n * Note that the `on` function is an alias for the `addListener` function.\n * They share identical functionality and either may be used interchangeably.\n *\n * - See also the {@link (CallMessage:class) | CallMessage class}.\n * - See also the {@link (OutgoingCallMessage:namespace) | OutgoingCallMessage namespace}.\n *\n * @public\n */\nexport declare interface OutgoingCallMessage {\n  /**\n   * ------------\n   * Emit Typings\n   * ------------\n   */\n\n  /** @internal */\n  emit(\n    failureEvent: OutgoingCallMessage.Event.Failure,\n    error: TwilioError\n  ): boolean;\n\n  /** @internal */\n  emit(sentEvent: OutgoingCallMessage.Event.Sent): boolean;\n\n  /** @internal */\n  emit(\n    outgoingCallMessageEvent: OutgoingCallMessage.Event,\n    ...args: any[]\n  ): boolean;\n\n  /**\n   * ----------------\n   * Listener Typings\n   * ----------------\n   */\n\n  /**\n   * Failure event. Raised when outgoingCallMessage fails to be sent out.\n   *\n   * @example\n   * ```typescript\n   * outgoingCallMessage.addListener(OutgoingCallMessage.Event.Failure, (error) => {\n   *    // outgoingCallMessage failed, handle error\n   * });\n   * ```\n   *\n   * @param failureEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The callMessage object.\n   */\n  addListener(\n    failureEvent: OutgoingCallMessage.Event.Failure,\n    listener: OutgoingCallMessage.Listener.Failure\n  ): this;\n  /** {@inheritDoc (OutgoingCallMessage:interface).(addListener:1)} */\n  on(\n    failureEvent: OutgoingCallMessage.Event.Failure,\n    listener: OutgoingCallMessage.Listener.Failure\n  ): this;\n\n  /**\n   * Sent event. Raised when outgoingCallMessage is sent.\n   * @example\n   * ```typescript\n   * outgoingCallMessage.addListener(OutgoingCallMessage.Event.Sent, () => {\n   *    // outgoingCallMessage sent\n   * })\n   * ```\n   *\n   * @param sentEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The callMessage object\n   */\n  addListener(\n    sentEvent: OutgoingCallMessage.Event.Sent,\n    listener: OutgoingCallMessage.Listener.Sent\n  ): this;\n  /** {@inheritDoc (OutgoingCallMessage:interface).(addListener:2)} */\n  on(\n    sentEvent: OutgoingCallMessage.Event.Sent,\n    listener: OutgoingCallMessage.Listener.Sent\n  ): this;\n\n  /**\n   * Generic event listener typings.\n   * @param outgoingCallMessageEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The outgoingCallMessage object.\n   */\n  addListener(\n    outgoingCallMessageEvent: OutgoingCallMessage.Event,\n    listener: OutgoingCallMessage.Listener.Generic\n  ): this;\n  /**\n   * {@inheritDoc (OutgoingCallMessage:interface).(addListener:3)}\n   */\n  on(\n    outgoingCallMessageEvent: OutgoingCallMessage.Event,\n    listener: OutgoingCallMessage.Listener.Generic\n  ): this;\n}\n\n/**\n * CallMessage API is in beta.\n *\n * Provides access to information about a outgoingCallMessage, including the call\n * message content, contentType, messageType, and voiceEventSid\n *\n * @remarks\n * Note that the outgoingCallMessage information is fetched as soon as possible from the\n * native layer, but there is no guarantee that all information is immediately\n * available. Methods such as `OutgoingCallMessage.getContent` or `OutgoingCallMessage.getSid`\n * may return `undefined`.\n *\n * As outgoingCallMessage events are received from the native layer, outgoingCallMessage information will\n * propagate from the native layer to the JS layer and become available.\n * Therefore, it is good practice to read information from the outgoingCallMessage after an\n * event occurs, or as events occur.\n *\n * - See the {@link (OutgoingCallMessage:namespace).Event} enum for events emitted by `OutgoingCallMessage`\n *   objects.\n * - See the {@link (OutgoingCallMessage:interface) | OutgoingCallMessage interface} for overloaded event listening\n *   metods.\n * - See the {@link (OutgoingCallMessage:namespace) | OutgoingCallMessage namespace} for types and enumerations\n *   used by this class.\n *\n * @public\n */\nexport class OutgoingCallMessage extends CallMessage {\n  /**\n   * Handlers for native OutgoingCallMessage events. Set upon construction so we can\n   * dynamically bind events to handlers.\n   *\n   * @privateRemarks\n   * This is done by the constructor so this mapping isn't made every time the\n   * {@link (OutgoingCallMessage:class)._handleNativeEvent} function is invoked.\n   */\n  private _nativeEventHandler: Record<\n    NativeCallMessageEventType,\n    (callEvent: NativeCallMessageEvent) => void\n  >;\n  constructor({\n    content,\n    contentType,\n    messageType,\n    voiceEventSid,\n  }: NativeCallMessageInfo) {\n    super({\n      content,\n      contentType,\n      messageType,\n      voiceEventSid,\n    });\n\n    this._nativeEventHandler = {\n      /**\n       * Sending Call Message State\n       */\n      [Constants.CallEventMessageFailure]: this._handleFailureEvent,\n      [Constants.CallEventMessageSent]: this._handleSentEvent,\n    };\n    NativeEventEmitter.addListener(\n      Constants.ScopeCallMessage,\n      this._handleNativeEvent\n    );\n  }\n\n  /**\n   * This intermediate native callMessage event handler acts as a \"gate\".\n   * @param nativeCallMessageEvent - A callMessage event directly from the native layer.\n   */\n  private _handleNativeEvent = (\n    nativeCallMessageEvent: NativeCallMessageEvent\n  ) => {\n    const { type } = nativeCallMessageEvent;\n\n    const handler = this._nativeEventHandler[type];\n    if (typeof handler === 'undefined') {\n      throw new Error(\n        `Unknown callMessage event type received from the native layer: \"${type}\"`\n      );\n    }\n\n    if (this.getSid() === nativeCallMessageEvent.voiceEventSid) {\n      handler(nativeCallMessageEvent);\n    }\n  };\n\n  /**\n   * Handler for the {@link (OutgoingCallMessage:namespace).Event.Failure} event.\n   * @param nativeCallMessageEvent - The native callMessage event.\n   */\n  private _handleFailureEvent = (\n    nativeCallMessageEvent: NativeCallMessageEvent\n  ) => {\n    if (nativeCallMessageEvent.type !== Constants.CallEventMessageFailure) {\n      throw new Error(\n        'Incorrect \"outgoingCallMessage#Failure\" handler called for type' +\n          `\"${nativeCallMessageEvent.type}`\n      );\n    }\n\n    const { message, code } = nativeCallMessageEvent.error;\n    const error = constructTwilioError(message, code);\n    this.emit(OutgoingCallMessage.Event.Failure, error);\n  };\n\n  /**\n   * Handler for the {@link (OutgoingCallMessage:namespace).Event.Sent} event.\n   * @param nativeCallMessageEvent - The native callMessage event.\n   */\n  private _handleSentEvent = (\n    nativeCallMessageEvent: NativeCallMessageEvent\n  ) => {\n    if (nativeCallMessageEvent.type !== Constants.CallEventMessageSent) {\n      throw new Error(\n        'Incorrect \"outgoingCallMessage#Sent\" handler called for type' +\n          `\"${nativeCallMessageEvent.type}\"`\n      );\n    }\n\n    this.emit(OutgoingCallMessage.Event.Sent);\n  };\n}\n\n/**\n * Namespace for enumerations and types used by\n * {@link (OutgoingCallMessage:class) | OutgoingCallMessage objects}.\n *\n * @remarks\n *  - See also the {@link (OutgoingCallMessage:class) | OutgoingCallMessage class}.\n *  - See also the {@link (OutgoingCallMessage:interface) | OutgoingCallMessage interface}.\n *\n * @public\n */\nexport namespace OutgoingCallMessage {\n  /**\n   * Enumeration of all event strings emitted by {@link (OutgoingCallMessage:class)} objects.\n   */\n  export enum Event {\n    /**\n     * Raised when outgoingCallMessage fails.\n     * See {@link (OutgoingCallMessage:interface).(addListener:1)}.\n     */\n    'Failure' = 'failure',\n    /**\n     * Raised when outgoingCallMessage has been sent.\n     * See {@link (OutgoingCallMessage:interface).(addListener:2)}.\n     */\n    'Sent' = 'sent',\n  }\n\n  /**\n   * Listener types for all events emitted by a\n   * {@link (OutgoingCallMessage:class) | OutgoingCallMessage: object}\n   */\n  export namespace Listener {\n    /**\n     * OutgoingCallMessage failure event listener. This should be the function signature of\n     * any event listener bound to the {@link (OutgoingCallMessage:namespace).Event.Failure} event.\n     *\n     * @remarks\n     * See {@link (OutgoingCallMessage:interface).(addListener:1)}.\n     *\n     * See {@link TwilioErrors} for all error classes.\n     */\n    export type Failure = (error: TwilioError) => void;\n\n    /**\n     * OutgoingCallMessage sent event listner. This should be the function signature of\n     * any event listener bound to the {@link (OutgoingCallMessage:namespace).Event.Sent} event.\n     *\n     * @remarks\n     * See {@link (OutgoingCallMessage:interface).(addListener:2)}.\n     */\n    export type Sent = () => void;\n\n    /**\n     * Generic event listener. This should be the function signature of any\n     * event listener bound to any OutgoingCallMessage event.\n     *\n     * @remarks\n     * See {@link (OutgoingCallMessage:interface).(addListener:3)}.\n     */\n    export type Generic = (...args: any[]) => void;\n  }\n}\n"]}