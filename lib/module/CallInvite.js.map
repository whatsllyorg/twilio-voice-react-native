{"version":3,"sources":["CallInvite.tsx"],"names":["EventEmitter","Call","NativeEventEmitter","NativeModule","Platform","InvalidStateError","TwilioError","UnsupportedPlatformError","constructTwilioError","CallMessage","OutgoingCallMessage","Constants","CallInvite","constructor","uuid","callSid","customParameters","from","to","state","nativeCallInviteEvent","_callSid","type","CallInviteEventTypeValueAccepted","_handleCallInviteAccepted","CallInviteEventTypeValueRejected","_handleCallInviteRejected","CallInviteEventTypeValueCancelled","_handleCallInviteCancelled","CallInviteEventTypeValueNotificationTapped","_handleCallInviteNotificationTapped","CallEventMessageReceived","_handleMessageReceivedEvent","_handleUnexpectedCallInviteEventType","callMessage","callMessageInfo","emit","Event","MessageReceived","callInvite","_state","State","Accepted","callInfo","sid","call","Rejected","nativeCallInviteCancelledEvent","Cancelled","error","message","code","undefined","NotificationTapped","_uuid","_customParameters","_from","_to","addListener","ScopeCallInvite","_handleNativeCallInviteEvent","event","accept","options","Pending","callInvite_accept","reject","callInvite_reject","isValid","callInvite_isValid","getCallSid","getCustomParameters","getFrom","getState","getTo","sendMessage","content","getContent","contentType","getContentType","messageType","getMessageType","voiceEventSid","call_sendMessage","JSON","stringify","outgoingCallMessage","updateCallerHandle","newHandle","OS","callInvite_updateCallerHandle","Listener"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,kBAAT,EAA6BC,YAA7B,EAA2CC,QAA3C,QAA2D,UAA3D;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,wBAAT,QAAyC,kCAAzC;AACA,SAASC,oBAAT,QAAqC,iBAArC;AASA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAsLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAN,SAAyBZ,YAAzB,CAAsC;AAC3C;AACF;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAGE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEa,EAAAA,WAAW,CACT;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,gBAAjB;AAAmCC,IAAAA,IAAnC;AAAyCC,IAAAA;AAAzC,GADS,EAETC,KAFS,EAGT;AACA;;AADA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,0DAsCAC,qBADqC,IAElC;AACH,UAAI,OAAOA,qBAAP,KAAiC,QAArC,EAA+C;AAC7C,cAAM,IAAId,WAAJ,CACH,eAAc,OAAOc,qBAAsB,6BADxC,CAAN;AAGD;;AAED,UAAIA,qBAAqB,KAAK,IAA9B,EAAoC;AAClC,cAAM,IAAId,WAAJ,CAAgB,2CAAhB,CAAN;AACD;;AAED,UAAI,OAAOc,qBAAqB,CAACL,OAA7B,KAAyC,QAA7C,EAAuD;AACrD,cAAM,IAAIT,WAAJ,CACJ,yDADI,CAAN;AAGD;;AAED,UAAIc,qBAAqB,CAACL,OAAtB,KAAkC,KAAKM,QAA3C,EAAqD;AACnD;AACD;;AAED,cAAQD,qBAAqB,CAACE,IAA9B;AACE,aAAKX,SAAS,CAACY,gCAAf;AACE,iBAAO,KAAKC,yBAAL,CAA+BJ,qBAA/B,CAAP;;AACF,aAAKT,SAAS,CAACc,gCAAf;AACE,iBAAO,KAAKC,yBAAL,EAAP;;AACF,aAAKf,SAAS,CAACgB,iCAAf;AACE,iBAAO,KAAKC,0BAAL,CAAgCR,qBAAhC,CAAP;;AACF,aAAKT,SAAS,CAACkB,0CAAf;AACE,iBAAO,KAAKC,mCAAL,EAAP;;AACF,aAAKnB,SAAS,CAACoB,wBAAf;AACE,iBAAO,KAAKC,2BAAL,CAAiCZ,qBAAjC,CAAP;;AACF;AACE,iBAAO,KAAKa,oCAAL,CAA0Cb,qBAA1C,CAAP;AAZJ;AAcD,KA1EC;;AAAA,yDAiFAA,qBADoC,IAEjC;AACH,YAAM;AAAEc,QAAAA,WAAW,EAAEC;AAAf,UAAmCf,qBAAzC;AAEA,YAAMc,WAAW,GAAG,IAAIzB,WAAJ,CAAgB0B,eAAhB,CAApB;AAEA,WAAKC,IAAL,CAAUxB,UAAU,CAACyB,KAAX,CAAiBC,eAA3B,EAA4CJ,WAA5C;AACD,KAxFC;;AAAA,uDA6FkC,CAAC;AACnCK,MAAAA;AADmC,KAAD,KAEC;AACnC,WAAKC,MAAL,GAAc5B,UAAU,CAAC6B,KAAX,CAAiBC,QAA/B;AAEA,YAAMC,QAAQ,GAAG;AACf7B,QAAAA,IAAI,EAAEyB,UAAU,CAACzB,IADF;AAEfE,QAAAA,gBAAgB,EAAEuB,UAAU,CAACvB,gBAFd;AAGf4B,QAAAA,GAAG,EAAEL,UAAU,CAACxB,OAHD;AAIfE,QAAAA,IAAI,EAAEsB,UAAU,CAACtB,IAJF;AAKfC,QAAAA,EAAE,EAAEqB,UAAU,CAACrB;AALA,OAAjB;AAQA,YAAM2B,IAAI,GAAG,IAAI5C,IAAJ,CAAS0C,QAAT,CAAb;AAEA,WAAKP,IAAL,CAAUxB,UAAU,CAACyB,KAAX,CAAiBK,QAA3B,EAAqCG,IAArC;AACD,KA7GC;;AAAA,uDAkHkC,MAAM;AACxC,WAAKL,MAAL,GAAc5B,UAAU,CAAC6B,KAAX,CAAiBK,QAA/B;AACA,WAAKV,IAAL,CAAUxB,UAAU,CAACyB,KAAX,CAAiBS,QAA3B;AACD,KArHC;;AAAA,wDA2HAC,8BADmC,IAEhC;AACH,WAAKP,MAAL,GAAc5B,UAAU,CAAC6B,KAAX,CAAiBO,SAA/B;AAEA,YAAMC,KAAK,GAAGF,8BAA8B,CAACE,KAA/B,GACVzC,oBAAoB,CAClBuC,8BAA8B,CAACE,KAA/B,CAAqCC,OADnB,EAElBH,8BAA8B,CAACE,KAA/B,CAAqCE,IAFnB,CADV,GAKVC,SALJ;AAOA,WAAKhB,IAAL,CAAUxB,UAAU,CAACyB,KAAX,CAAiBW,SAA3B,EAAsCC,KAAtC;AACD,KAvIC;;AAAA,iEA4I4C,MAAM;AAClD,WAAKb,IAAL,CAAUxB,UAAU,CAACyB,KAAX,CAAiBgB,kBAA3B;AACD,KA9IC;;AAGA,SAAKC,KAAL,GAAaxC,IAAb;AACA,SAAKO,QAAL,GAAgBN,OAAhB;AACA,SAAKwC,iBAAL,GAAyB,EAAE,GAAGvC;AAAL,KAAzB;AACA,SAAKwC,KAAL,GAAavC,IAAb;AACA,SAAKwC,GAAL,GAAWvC,EAAX;AAEA,SAAKsB,MAAL,GAAcrB,KAAd;AAEAjB,IAAAA,kBAAkB,CAACwD,WAAnB,CACE/C,SAAS,CAACgD,eADZ,EAEE,KAAKC,4BAFP;AAID;AAED;AACF;AACA;AACA;AACA;AACA;;;AACU3B,EAAAA,oCAAoC,CAAC4B,KAAD,EAAe;AACzD,UAAM,IAAIvD,WAAJ,CACH,uBAAuBuD,KAAxB,aAAwBA,KAAxB,uBAAwBA,KAAD,CAAgBvC,IAAK,wBADxC,CAAN;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AA4GE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACc,QAANwC,MAAM,CAACC,OAAiC,GAAG,EAArC,EAAwD;AAClE,QAAI,KAAKvB,MAAL,KAAgB5B,UAAU,CAAC6B,KAAX,CAAiBuB,OAArC,EAA8C;AAC5C,YAAM,IAAI3D,iBAAJ,CACH,kBAAiB,KAAKmC,MAAO,KAA9B,GACG,mBAAkB5B,UAAU,CAAC6B,KAAX,CAAiBuB,OAAQ,IAF1C,CAAN;AAID;;AAED,UAAMrB,QAAQ,GAAG,MAAMxC,YAAY,CAAC8D,iBAAb,CAA+B,KAAKX,KAApC,EAA2CS,OAA3C,CAAvB;AAEA,UAAMlB,IAAI,GAAG,IAAI5C,IAAJ,CAAS0C,QAAT,CAAb;AAEA,WAAOE,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACc,QAANqB,MAAM,GAAkB;AAC5B,QAAI,KAAK1B,MAAL,KAAgB5B,UAAU,CAAC6B,KAAX,CAAiBuB,OAArC,EAA8C;AAC5C,YAAM,IAAI3D,iBAAJ,CACH,kBAAiB,KAAKmC,MAAO,KAA9B,GACG,mBAAkB5B,UAAU,CAAC6B,KAAX,CAAiBuB,OAAQ,IAF1C,CAAN;AAID;;AAED,UAAM7D,YAAY,CAACgE,iBAAb,CAA+B,KAAKb,KAApC,CAAN;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEc,EAAAA,OAAO,GAAqB;AAC1B,WAAOjE,YAAY,CAACkE,kBAAb,CAAgC,KAAKf,KAArC,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACEgB,EAAAA,UAAU,GAAW;AACnB,WAAO,KAAKjD,QAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEkD,EAAAA,mBAAmB,GAAqB;AACtC,WAAO,KAAKhB,iBAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEiB,EAAAA,OAAO,GAAW;AAChB,WAAO,KAAKhB,KAAZ;AACD;AAED;AACF;AACA;AACA;;;AACEiB,EAAAA,QAAQ,GAAqB;AAC3B,WAAO,KAAKjC,MAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEkC,EAAAA,KAAK,GAAW;AACd,WAAO,KAAKjB,GAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACmB,QAAXkB,WAAW,CAACzB,OAAD,EAAqD;AACpE,UAAM0B,OAAO,GAAG1B,OAAO,CAAC2B,UAAR,EAAhB;AACA,UAAMC,WAAW,GAAG5B,OAAO,CAAC6B,cAAR,EAApB;AACA,UAAMC,WAAW,GAAG9B,OAAO,CAAC+B,cAAR,EAApB;AAEA,UAAMC,aAAa,GAAG,MAAM/E,YAAY,CAACgF,gBAAb,CAC1B,KAAK7B,KADqB,EAE1B8B,IAAI,CAACC,SAAL,CAAeT,OAAf,CAF0B,EAG1BE,WAH0B,EAI1BE,WAJ0B,CAA5B;AAOA,UAAMM,mBAAmB,GAAG,IAAI5E,mBAAJ,CAAwB;AAClDkE,MAAAA,OADkD;AAElDE,MAAAA,WAFkD;AAGlDE,MAAAA,WAHkD;AAIlDE,MAAAA;AAJkD,KAAxB,CAA5B;AAOA,WAAOI,mBAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC0B,QAAlBC,kBAAkB,CAACC,SAAD,EAAmC;AACzD,YAAQpF,QAAQ,CAACqF,EAAjB;AACE,WAAK,KAAL;AACE,eAAOtF,YAAY,CAACuF,6BAAb,CACL,KAAKpC,KADA,EAELkC,SAFK,CAAP;;AAIF;AACE,cAAM,IAAIjF,wBAAJ,CACH,yBAAwBH,QAAQ,CAACqF,EAAG,0CADjC,CAAN;AAPJ;AAWD;;AAjX0C;AAoX7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEE;AACF;AACA;MAMchD,K;;aAAAA,K;AAAAA,IAAAA,K;AAAAA,IAAAA,K;AAAAA,IAAAA,K;AAAAA,IAAAA,K;KAAAA,K,KAAAA,K;;;MA0BAJ,K;;aAAAA,K;AAAAA,IAAAA,K;AAAAA,IAAAA,K;AAAAA,IAAAA,K;AAAAA,IAAAA,K;AAAAA,IAAAA,K;KAAAA,K,KAAAA,K;;;;;4BAsCKsD,Q,KAAAA,Q,eAAAA,Q,iBAAAA,Q;GAzEF/E,U,KAAAA,U","sourcesContent":["/**\n * Copyright Â© 2022 Twilio, Inc. All rights reserved. Licensed under the Twilio\n * license.\n *\n * See LICENSE in the project root for license information.\n */\n\nimport { EventEmitter } from 'eventemitter3';\nimport { Call } from './Call';\nimport { NativeEventEmitter, NativeModule, Platform } from './common';\nimport { InvalidStateError } from './error/InvalidStateError';\nimport { TwilioError } from './error/TwilioError';\nimport { UnsupportedPlatformError } from './error/UnsupportedPlatformError';\nimport { constructTwilioError } from './error/utility';\nimport type {\n  NativeCallInviteInfo,\n  NativeCallInviteEvent,\n  NativeCallInviteAcceptedEvent,\n  NativeCallInviteCancelledEvent,\n  NativeCallInviteMessageReceivedEvent,\n} from './type/CallInvite';\nimport type { CustomParameters, Uuid } from './type/common';\nimport { CallMessage } from './CallMessage';\nimport { OutgoingCallMessage } from './OutgoingCallMessage';\nimport { Constants } from './constants';\n\n/**\n * Defines strict typings for all events emitted by {@link (CallInvite:class)\n * | CallInvite objects}.\n *\n * @remarks\n * Note that the `on` function is an alias for the `addListener` function.\n * They share identical functionality and either may be used interchangeably.\n *\n * - See also the {@link (CallInvite:class) | CallInvite class}.\n * - See also the {@link (CallInvite:namespace) | CallInvite namespace}.\n *\n * @public\n */\nexport declare interface CallInvite {\n  /**\n   * ------------\n   * Emit Typings\n   * ------------\n   */\n\n  /** @internal */\n  emit(acceptedEvent: CallInvite.Event.Accepted, call: Call): boolean;\n\n  /** @internal */\n  emit(rejectedEvent: CallInvite.Event.Rejected): boolean;\n\n  /** @internal */\n  emit(\n    cancelledEvent: CallInvite.Event.Cancelled,\n    error?: TwilioError\n  ): boolean;\n\n  /** @internal */\n  emit(notificationTappedEvent: CallInvite.Event.NotificationTapped): boolean;\n\n  /** @internal */\n  emit(\n    messageReceivedEvent: CallInvite.Event.MessageReceived,\n    callMessage: CallMessage\n  ): boolean;\n\n  /**\n   * ----------------\n   * Listener Typings\n   * ----------------\n   */\n\n  /**\n   * Accepted event. Raised when the call invite has been accepted.\n   *\n   * @example\n   * ```ts\n   * voice.on(Voice.Event.CallInvite, (callInvite) => {\n   *   callInvite.on(CallInvite.Event.Accepted, (call) => {\n   *     // the call invite was accepted through either the native layer\n   *     // or the js layer\n   *   });\n   * });\n   * ```\n   *\n   * @remarks\n   *\n   * @param acceptedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call invite object.\n   */\n  addListener(\n    acceptedEvent: CallInvite.Event.Accepted,\n    listener: CallInvite.Listener.Accepted\n  ): this;\n  /** {@inheritDoc (CallInvite:interface).(addListener:1)} */\n  on(\n    acceptedEvent: CallInvite.Event.Accepted,\n    listener: CallInvite.Listener.Accepted\n  ): this;\n\n  /**\n   * Rejected event. Raised when the call invite has been rejected.\n   *\n   * @example\n   * ```ts\n   * voice.on(Voice.Event.CallInvite, (callInvite) => {\n   *   callInvite.on(CallInvite.Event.Rejected, () => {\n   *     // the call invite was rejected through either the native layer\n   *     // or the js layer\n   *   });\n   * });\n   * ```\n   *\n   * @remarks\n   *\n   * @param rejectedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call invite object.\n   */\n  addListener(\n    rejectedEvent: CallInvite.Event.Rejected,\n    listener: CallInvite.Listener.Rejected\n  ): this;\n  /** {@inheritDoc (CallInvite:interface).(addListener:2)} */\n  on(\n    rejectedEvent: CallInvite.Event.Rejected,\n    listener: CallInvite.Listener.Rejected\n  ): this;\n\n  /**\n   * Cancelled event. Raised when the call invite has been cancelled.\n   *\n   * @example\n   * ```ts\n   * voice.on(Voice.Event.CallInvite, (callInvite) => {\n   *   callInvite.on(CallInvite.Event.Cancelled, (error) => {\n   *     // the call invite was cancelled\n   *   });\n   * });\n   * ```\n   *\n   * @remarks\n   *\n   * @param cancelledEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call invite object.\n   */\n  addListener(\n    cancelledEvent: CallInvite.Event.Cancelled,\n    listener: CallInvite.Listener.Cancelled\n  ): this;\n  /** {@inheritDoc (CallInvite:interface).(addListener:3)} */\n  on(\n    cancelledEvent: CallInvite.Event.Cancelled,\n    listener: CallInvite.Listener.Cancelled\n  ): this;\n\n  /**\n   * Notification tapped event. Raised when the call invite notification has\n   * been tapped.\n   *\n   * @example\n   * ```ts\n   * voice.on(Voice.Event.CallInvite, (callInvite) => {\n   *   callInvite.on(CallInvite.Event.NotificationTapped, () => {\n   *     // the call invite notification was tapped\n   *   });\n   * });\n   * ```\n   *\n   * @remarks\n   * This API is Android specific.\n   *\n   * @param notificationTappedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call invite object.\n   */\n  addListener(\n    notificationTappedEvent: CallInvite.Event.NotificationTapped,\n    listener: CallInvite.Listener.NotificationTapped\n  ): this;\n  /** {@inheritDoc (CallInvite:interface).(addListener:4)} */\n  on(\n    notificationTappedEvent: CallInvite.Event.NotificationTapped,\n    listener: CallInvite.Listener.NotificationTapped\n  ): this;\n\n  /**\n   * MessageReceived event. Raised when {@link (CallMessage:class)} is received.\n   * @example\n   * ```typescript\n   * voice.on(Voice.Event.CallInvite, (callInvite) => {\n   *   callInvite.addListener(CallInvite.Event.MessageReceived, (message) => {\n   *      // callMessage received\n   *   });\n   * });\n   * ```\n   *\n   * @param messageReceivedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The callMessage object\n   */\n  addListener(\n    messageReceivedEvent: CallInvite.Event.MessageReceived,\n    listener: CallInvite.Listener.MessageReceived\n  ): this;\n  /** {@inheritDoc (CallInvite:interface).(addListener:5)} */\n  on(\n    messageReceivedEvent: CallInvite.Event.MessageReceived,\n    listener: CallInvite.Listener.MessageReceived\n  ): this;\n}\n\n/**\n * Provides access to information about a call invite, including the call\n * parameters, and exposes functionality to accept or decline a call.\n *\n * @remarks\n *\n * Note that when a `CallInvite` is acted upon (i.e. when\n * {@link (CallInvite:class).accept} or {@link (CallInvite:class).reject} is\n * invoked), then the `CallInvite` is \"settled\".\n *\n * The state of the `CallInvite` is changed from\n * {@link (CallInvite:namespace).State.Pending} to\n * {@link (CallInvite:namespace).State.Accepted} or\n * {@link (CallInvite:namespace).State.Rejected} and the `CallInvite` can no\n * longer be acted upon further.\n *\n * Further action after \"settling\" a `CallInvite` will throw an error.\n *\n *  - See the {@link (CallInvite:namespace) | CallInvite namespace} for\n *    enumerations and types used by this class.\n *\n * @public\n */\nexport class CallInvite extends EventEmitter {\n  /**\n   * The current state of the call invite.\n   *\n   * @remarks\n   * See {@link (CallInvite:namespace).State}.\n   */\n  private _state: CallInvite.State;\n  /**\n   * The `Uuid` of this call invite. Used to identify calls between the JS and\n   * native layer so we can associate events and native functionality between\n   * the layers.\n   */\n  private _uuid: Uuid;\n  /**\n   * A string representing the SID of this call.\n   */\n  private _callSid: string;\n  /**\n   * Call custom parameters.\n   */\n  private _customParameters: CustomParameters;\n  /**\n   * Call `from` parameter.\n   */\n  private _from: string;\n  /**\n   * Call `to` parameter.\n   */\n  private _to: string;\n\n  /**\n   * These objects should not be instantiated by consumers of the SDK. All\n   * instances of the `CallInvite` class should be emitted by the SDK.\n   *\n   * @param nativeCallInviteInfo - A dataobject containing the native\n   * information of a call invite.\n   * @param state - Mocking options for testing.\n   *\n   * @internal\n   */\n  constructor(\n    { uuid, callSid, customParameters, from, to }: NativeCallInviteInfo,\n    state: CallInvite.State\n  ) {\n    super();\n\n    this._uuid = uuid;\n    this._callSid = callSid;\n    this._customParameters = { ...customParameters };\n    this._from = from;\n    this._to = to;\n\n    this._state = state;\n\n    NativeEventEmitter.addListener(\n      Constants.ScopeCallInvite,\n      this._handleNativeCallInviteEvent\n    );\n  }\n\n  /**\n   * This helper function serves as both a runtime-check error log and a\n   * compile-time type-guard. If the switch-case statement below is non-\n   * exhaustive, then the type passed to this function will _not_ have type\n   * `never`.\n   */\n  private _handleUnexpectedCallInviteEventType(event: never) {\n    throw new TwilioError(\n      `Unknown event type \"${(event as any)?.type}\" reached call invite.`\n    );\n  }\n\n  /**\n   * This intermediate native call invite event handler acts as a \"gate\", only\n   * executing the actual call invite event handler (such as `Accepted`) if\n   * this call invite object matches the `Uuid` of the call invite that had an\n   * event raised.\n   * @param nativeCallInviteEvent - A call invite event directly from the native\n   * layer.\n   */\n  private _handleNativeCallInviteEvent = (\n    nativeCallInviteEvent: NativeCallInviteEvent\n  ) => {\n    if (typeof nativeCallInviteEvent !== 'object') {\n      throw new TwilioError(\n        `Received a \"${typeof nativeCallInviteEvent}\" native call invite event.`\n      );\n    }\n\n    if (nativeCallInviteEvent === null) {\n      throw new TwilioError('Received a null native call invite event.');\n    }\n\n    if (typeof nativeCallInviteEvent.callSid !== 'string') {\n      throw new TwilioError(\n        'Received a native call invite event without a call SID.'\n      );\n    }\n\n    if (nativeCallInviteEvent.callSid !== this._callSid) {\n      return;\n    }\n\n    switch (nativeCallInviteEvent.type) {\n      case Constants.CallInviteEventTypeValueAccepted:\n        return this._handleCallInviteAccepted(nativeCallInviteEvent);\n      case Constants.CallInviteEventTypeValueRejected:\n        return this._handleCallInviteRejected();\n      case Constants.CallInviteEventTypeValueCancelled:\n        return this._handleCallInviteCancelled(nativeCallInviteEvent);\n      case Constants.CallInviteEventTypeValueNotificationTapped:\n        return this._handleCallInviteNotificationTapped();\n      case Constants.CallEventMessageReceived:\n        return this._handleMessageReceivedEvent(nativeCallInviteEvent);\n      default:\n        return this._handleUnexpectedCallInviteEventType(nativeCallInviteEvent);\n    }\n  };\n\n  /**\n   * Handler for the {@link (CallInvite:namespace).Event.MessageReceived} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleMessageReceivedEvent = (\n    nativeCallInviteEvent: NativeCallInviteMessageReceivedEvent\n  ) => {\n    const { callMessage: callMessageInfo } = nativeCallInviteEvent;\n\n    const callMessage = new CallMessage(callMessageInfo);\n\n    this.emit(CallInvite.Event.MessageReceived, callMessage);\n  };\n\n  /**\n   * Handle when this call invite is accepted.\n   */\n  private _handleCallInviteAccepted = ({\n    callInvite,\n  }: NativeCallInviteAcceptedEvent) => {\n    this._state = CallInvite.State.Accepted;\n\n    const callInfo = {\n      uuid: callInvite.uuid,\n      customParameters: callInvite.customParameters,\n      sid: callInvite.callSid,\n      from: callInvite.from,\n      to: callInvite.to,\n    };\n\n    const call = new Call(callInfo);\n\n    this.emit(CallInvite.Event.Accepted, call);\n  };\n\n  /**\n   * Handle when this call invite is rejected.\n   */\n  private _handleCallInviteRejected = () => {\n    this._state = CallInvite.State.Rejected;\n    this.emit(CallInvite.Event.Rejected);\n  };\n\n  /**\n   * Handle when a call invite is cancelled.\n   */\n  private _handleCallInviteCancelled = (\n    nativeCallInviteCancelledEvent: NativeCallInviteCancelledEvent\n  ) => {\n    this._state = CallInvite.State.Cancelled;\n\n    const error = nativeCallInviteCancelledEvent.error\n      ? constructTwilioError(\n          nativeCallInviteCancelledEvent.error.message,\n          nativeCallInviteCancelledEvent.error.code\n        )\n      : undefined;\n\n    this.emit(CallInvite.Event.Cancelled, error);\n  };\n\n  /**\n   * Handle when a call invite notification is tapped.\n   */\n  private _handleCallInviteNotificationTapped = () => {\n    this.emit(CallInvite.Event.NotificationTapped);\n  };\n\n  /**\n   * Accept a call invite. Sets the state of this call invite to\n   * {@link (CallInvite:namespace).State.Accepted}.\n   * @param options - Options to pass to the native layer when accepting the\n   * call.\n   * @returns\n   *  - Resolves when a {@link (Call:class) | Call object} associated with this\n   *    {@link (CallInvite:class)} has been created.\n   */\n  async accept(options: CallInvite.AcceptOptions = {}): Promise<Call> {\n    if (this._state !== CallInvite.State.Pending) {\n      throw new InvalidStateError(\n        `Call in state \"${this._state}\", ` +\n          `expected state \"${CallInvite.State.Pending}\".`\n      );\n    }\n\n    const callInfo = await NativeModule.callInvite_accept(this._uuid, options);\n\n    const call = new Call(callInfo);\n\n    return call;\n  }\n\n  /**\n   * Reject a call invite. Sets the state of this call invite to\n   * {@link (CallInvite:namespace).State.Rejected}.\n   * @returns\n   *  - Resolves when the {@link (CallInvite:class)} has been rejected.\n   */\n  async reject(): Promise<void> {\n    if (this._state !== CallInvite.State.Pending) {\n      throw new InvalidStateError(\n        `Call in state \"${this._state}\", ` +\n          `expected state \"${CallInvite.State.Pending}\".`\n      );\n    }\n\n    await NativeModule.callInvite_reject(this._uuid);\n  }\n\n  /**\n   * Check if a `CallInvite` is valid.\n   *\n   * @returns\n   *  - TODO\n   *\n   * @alpha\n   */\n  isValid(): Promise<boolean> {\n    return NativeModule.callInvite_isValid(this._uuid);\n  }\n\n  /**\n   * Get the call SID associated with this `CallInvite` class.\n   * @returns - A string representing the call SID.\n   */\n  getCallSid(): string {\n    return this._callSid;\n  }\n\n  /**\n   * Get the custom parameters of the call associated with this `CallInvite`\n   * class.\n   * @returns - A `Record` of custom parameters.\n   */\n  getCustomParameters(): CustomParameters {\n    return this._customParameters;\n  }\n\n  /**\n   * Get the `from` parameter of the call associated with this `CallInvite`\n   * class.\n   * @returns - A `string` representing the `from` parameter.\n   */\n  getFrom(): string {\n    return this._from;\n  }\n\n  /**\n   * Get the `state` of the `CallInvite`.\n   * @returns - The `state` of this `CallInvite`.\n   */\n  getState(): CallInvite.State {\n    return this._state;\n  }\n\n  /**\n   * Get the `to` parameter of the call associated with this `CallInvite`\n   * class.\n   * @returns - A `string` representing the `to` parameter.\n   */\n  getTo(): string {\n    return this._to;\n  }\n\n  /**\n   * CallMessage API is in beta.\n   *\n   * Send {@link (CallMessage:class)}.\n   *\n   * @example\n   * To send a user-defined-message\n   * ```typescript\n   * const message = new CallMessage({\n   *    content: { key1: 'This is a messsage from the parent call' },\n   *    contentType: CallMessage.ContentType.ApplicationJson,\n   *    messageType: CallMessage.MessageType.UserDefinedMessage\n   * })\n   * const outgoingCallMessage: OutgoingCallMessage = await call.sendMessage(message)\n   *\n   * outgoingCallMessage.addListener(OutgoingCallMessage.Event.Failure, (error) => {\n   *    // outgoingCallMessage failed, handle error\n   * });\n   *\n   * outgoingCallMessage.addListener(OutgoingCallMessage.Event.Sent, () => {\n   *    // outgoingCallMessage sent\n   * })\n   * ```\n   *\n   * @param content - The message content\n   * @param contentType - The MIME type for the message. See {@link (CallMessage:namespace).ContentType}.\n   * @param messageType - The message type. See {@link (CallMessage:namespace).MessageType}.\n   *\n   * @returns\n   *  A `Promise` that\n   *    - Resolves with the OutgoingCallMessage object.\n   *    - Rejects when the message is unable to be sent.\n   */\n  async sendMessage(message: CallMessage): Promise<OutgoingCallMessage> {\n    const content = message.getContent();\n    const contentType = message.getContentType();\n    const messageType = message.getMessageType();\n\n    const voiceEventSid = await NativeModule.call_sendMessage(\n      this._uuid,\n      JSON.stringify(content),\n      contentType,\n      messageType\n    );\n\n    const outgoingCallMessage = new OutgoingCallMessage({\n      content,\n      contentType,\n      messageType,\n      voiceEventSid,\n    });\n\n    return outgoingCallMessage;\n  }\n\n  /**\n   * Update the caller name displayed in the iOS system incoming call screen.\n   *\n   * @param newHandle - The new value of the caller's name.\n   *\n   * @remarks\n   * Unsupported platforms:\n   * - Android\n   *\n   * This API is specific to iOS and unavailable in Android. Invoke this method\n   * after the incoming call has been reported to CallKit and before the call\n   * has been accepted. For example, perform an async request to your app server\n   * to fetch the full name of the caller and use this method to replace the\n   * default caller name in `from`.\n   *\n   * @returns\n   *  - Resolves when the caller name has been updated.\n   */\n  async updateCallerHandle(newHandle: string): Promise<void> {\n    switch (Platform.OS) {\n      case 'ios':\n        return NativeModule.callInvite_updateCallerHandle(\n          this._uuid,\n          newHandle\n        );\n      default:\n        throw new UnsupportedPlatformError(\n          `Unsupported platform \"${Platform.OS}\". This method is only supported on iOS.`\n        );\n    }\n  }\n}\n\n/**\n * Provides enumerations and types used by a {@link (CallInvite:class)\n * | CallInvite object}.\n *\n * @remarks\n *  - See also the {@link (CallInvite:class) | CallInvite class}.\n *\n * @public\n */\nexport namespace CallInvite {\n  /**\n   * Options to pass to the native layer when accepting the call.\n   */\n  export interface AcceptOptions {}\n\n  /**\n   * An enumeration of {@link (CallInvite:class)} states.\n   */\n  export enum State {\n    /**\n     * State of a call invite when it has not been acted upon.\n     */\n    Pending = 'pending',\n\n    /**\n     * State of a call invite when it has been accepted.\n     */\n    Accepted = 'accepted',\n\n    /**\n     * State of a call invite when it has been rejected.\n     */\n    Rejected = 'rejected',\n\n    /**\n     * State of a call invite when it has been cancelled.\n     */\n    Cancelled = 'cancelled',\n  }\n\n  /**\n   * Enumeration of all event strings emitted by {@link (CallInvite:class)}\n   * objects.\n   */\n  export enum Event {\n    /**\n     * Event string for the `Accepted` event.\n     * See {@link (CallInvite:interface).(addListener:1)}.\n     */\n    Accepted = 'accepted',\n\n    /**\n     * Event string for the `Rejected` event.\n     * See {@link (CallInvite:interface).(addListener:2)}.\n     */\n    Rejected = 'rejected',\n\n    /**\n     * Event string for the `Cancelled` event.\n     * See {@link (CallInvite:interaface).(addListener:3)}.\n     */\n    Cancelled = 'cancelled',\n\n    /**\n     * Event string for the `NotificationTapped` event.\n     * See {@link (CallInvite:interaface).(addListener:4)}.\n     */\n    NotificationTapped = 'notificationTapped',\n\n    /**\n     * CallMessage API is in beta.\n     *\n     * Event string for the `MessageReceived` event.\n     * See {@link (CallInvite:interface).(addListener:5)}\n     */\n    MessageReceived = 'messageReceived',\n  }\n\n  /**\n   * Listener types for all events emitted by a\n   * {@link (CallInvite:class) | Call invite object.}\n   */\n  export namespace Listener {\n    /**\n     * Accepted event listener. This should be the function signature of any\n     * event listener bound to the {@link (CallInvite:namespace).Event.Accepted}\n     * event.\n     *\n     * @remarks\n     * See {@link (CallInvite:interface).(addListener:1)}.\n     */\n    export type Accepted = (call: Call) => void;\n\n    /**\n     * Rejected event listener. This should be the function signature of any\n     * event listener bound to the {@link (CallInvite:namespace).Event.Rejected}\n     * event.\n     *\n     * @remarks\n     * See {@link (CallInvite:interface).(addListener:2)}.\n     */\n    export type Rejected = () => void;\n\n    /**\n     * Cancelled event listener. This should be the function signature of any\n     * event listener bound to the\n     * {@link (CallInvite:namespace).Event.Cancelled} event.\n     *\n     * @remarks\n     * See {@link (CallInvite:interface).(addListener:3)}.\n     */\n    export type Cancelled = (error?: TwilioError) => void;\n\n    /**\n     * Rejected event listener. This should be the function signature of any\n     * event listener bound to the\n     * {@link (CallInvite:namespace).Event.NotificationTapped} event.\n     *\n     * @remarks\n     * See {@link (CallInvite:interface).(addListener:4)}.\n     */\n    export type NotificationTapped = () => void;\n\n    /**\n     * CallMessage API is in beta.\n     *\n     * CallInviteMessage received event listener. This should be the function signature of\n     * any event listener bound to the {@link (CallInvite:namespace).Event.MessageReceived} event.\n     *\n     * @remarks\n     * See {@link (CallInvite:interface).(addListener:5)}.\n     */\n    export type MessageReceived = (callMessage: CallMessage) => void;\n  }\n}\n"]}