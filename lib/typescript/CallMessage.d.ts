/**
 * Copyright Â© 2022 Twilio, Inc. All rights reserved. Licensed under the Twilio
 * license.
 *
 * See LICENSE in the project root for license information.
 */
import { EventEmitter } from 'eventemitter3';
import type { NativeCallMessageInfo } from './type/CallMessage';
/**
 * CallMessage API is in beta.
 *
 * Provides access to information about a callMessage, including the call
 * message content, contentType, messageType, and voiceEventSid
 *
 * @public
 */
export declare class CallMessage extends EventEmitter {
    /**
     * The content of the message which should match the contentType parameter.
     */
    private _content;
    /**
     * The MIME type of the content.
     */
    private _contentType;
    /**
     * Message type
     */
    private _messageType;
    /**
     * An autogenerated id that uniquely identifies the instance of this message.
     * This is not required when sending a message from the SDK as this is autogenerated.
     * But it will be available after the message is sent, or when a message is received.
     */
    private _voiceEventSid?;
    /**
     * Constructor for the {@link (CallMessage:class) | CallMessage class}. This should
     * not be invoked by third-party code.
     *
     * @param NativeCallMessageInfo - An object containing all of the data from the
     * native layer necessary to fully describe a callMessage, as well as invoke native
     * functionality for the callMessage.
     *
     * @internal
     */
    constructor({ content, contentType, messageType, voiceEventSid, }: NativeCallMessageInfo);
    /**
     * Get the content body of the message.
     * @returns
     * - A string representing the content body of the message.
     */
    getContent(): any;
    /**
     * Get the MIME type for the message.
     * @returns
     * - A {@link (CallMessage:namespace).ContentType}.
     */
    getContentType(): CallMessage.ContentType;
    /**
     * Get the message type.
     * @returns
     * - A {@link (CallMessage:namespace).MessageType}.
     */
    getMessageType(): CallMessage.MessageType;
    /**
     * Get the message SID.
     * @returns
     * - A string representing the message SID.
     * - `undefined` if the call information has not yet been received from the
     *   native layer.
     */
    getSid(): string | undefined;
}
/**
 * Namespace for enumerations and types used by
 * {@link (CallMessage:class) | CallMessage objects}.
 *
 * @remarks
 *  - See also the {@link (CallMessage:class) | CallMessage class}.
 *
 * @public
 */
export declare namespace CallMessage {
    enum MessageType {
        'UserDefinedMessage' = "user-defined-message"
    }
    enum ContentType {
        'ApplicationJson' = "application/json"
    }
}
