{"version":3,"sources":["CallMessage.ts"],"names":["CallMessage","EventEmitter","constructor","content","contentType","messageType","voiceEventSid","InvalidArgumentError","ContentType","MessageType","_content","_contentType","_messageType","_voiceEventSid","getContent","getContentType","getMessageType","getSid","Constants","UserDefinedMessage","ApplicationJson"],"mappings":";;;;;;;AAOA;;AAGA;;AAEA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,WAAN,SAA0BC,0BAA1B,CAAuC;AAC5C;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;AACA;AACA;;AAGE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAAC;AACVC,IAAAA,OADU;AAEVC,IAAAA,WAFU;AAGVC,IAAAA,WAHU;AAIVC,IAAAA;AAJU,GAAD,EAKe;AACxB;;AADwB;;AAAA;;AAAA;;AAAA;;AAGxB,QAAI,OAAOH,OAAP,KAAmB,WAAnB,IAAkCA,OAAO,KAAK,IAAlD,EAAwD;AACtD,YAAM,IAAII,0CAAJ,CAAyB,oBAAzB,CAAN;AACD;;AAED,QAAI,EAAEH,WAAW,IAAIJ,WAAW,CAACQ,WAA7B,CAAJ,EAA+C;AAC7C,YAAM,IAAID,0CAAJ,CACJ,6DADI,CAAN;AAGD;;AAED,QAAI,EAAEF,WAAW,IAAIL,WAAW,CAACS,WAA7B,CAAJ,EAA+C;AAC7C,YAAM,IAAIF,0CAAJ,CACJ,6DADI,CAAN;AAGD;;AAED,SAAKG,QAAL,GAAgBP,OAAhB;AACA,SAAKQ,YAAL,GAAoBP,WAApB;AACA,SAAKQ,YAAL,GAAoBP,WAApB;AACA,SAAKQ,cAAL,GAAsBP,aAAtB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEQ,EAAAA,UAAU,GAAQ;AAChB,WAAO,KAAKJ,QAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEK,EAAAA,cAAc,GAA4B;AACxC,WAAO,KAAKJ,YAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEK,EAAAA,cAAc,GAA4B;AACxC,WAAO,KAAKJ,YAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEK,EAAAA,MAAM,GAAuB;AAC3B,WAAO,KAAKJ,cAAZ;AACD;;AAnG2C;AAsG9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;MAEcJ,W;;aAAAA,W;AAAAA,IAAAA,W,CAAAA,W,yBACaS,qBAAUC,kB;KADvBV,W,KAAAA,W;;;MAIAD,W;;aAAAA,W;AAAAA,IAAAA,W,CAAAA,W,sBACUU,qBAAUE,e;KADpBZ,W,KAAAA,W;;;GALGR,W,2BAAAA,W","sourcesContent":["/**\n * Copyright Â© 2022 Twilio, Inc. All rights reserved. Licensed under the Twilio\n * license.\n *\n * See LICENSE in the project root for license information.\n */\n\nimport { EventEmitter } from 'eventemitter3';\n// NOTE(kchoy): VBLOCKS-2673 Remove after typescript 5.x upgrade\n//@ts-ignore\nimport { Constants } from './constants';\nimport type { NativeCallMessageInfo } from './type/CallMessage';\nimport { InvalidArgumentError } from './error/InvalidArgumentError';\n\n/**\n * CallMessage API is in beta.\n *\n * Provides access to information about a callMessage, including the call\n * message content, contentType, messageType, and voiceEventSid\n *\n * @public\n */\nexport class CallMessage extends EventEmitter {\n  /**\n   * The content of the message which should match the contentType parameter.\n   */\n  private _content: any;\n\n  /**\n   * The MIME type of the content.\n   */\n  private _contentType: CallMessage.ContentType;\n\n  /**\n   * Message type\n   */\n  private _messageType: CallMessage.MessageType;\n\n  /**\n   * An autogenerated id that uniquely identifies the instance of this message.\n   * This is not required when sending a message from the SDK as this is autogenerated.\n   * But it will be available after the message is sent, or when a message is received.\n   */\n  private _voiceEventSid?: string;\n\n  /**\n   * Constructor for the {@link (CallMessage:class) | CallMessage class}. This should\n   * not be invoked by third-party code.\n   *\n   * @param NativeCallMessageInfo - An object containing all of the data from the\n   * native layer necessary to fully describe a callMessage, as well as invoke native\n   * functionality for the callMessage.\n   *\n   * @internal\n   */\n  constructor({\n    content,\n    contentType,\n    messageType,\n    voiceEventSid,\n  }: NativeCallMessageInfo) {\n    super();\n\n    if (typeof content === 'undefined' || content === null) {\n      throw new InvalidArgumentError('\"content\" is empty');\n    }\n\n    if (!(contentType in CallMessage.ContentType)) {\n      throw new InvalidArgumentError(\n        '\"contentType\" must be valid enum of CallMessage.ContentType'\n      );\n    }\n\n    if (!(messageType in CallMessage.MessageType)) {\n      throw new InvalidArgumentError(\n        '\"messageType\" must be valid enum of CallMessage.MessageType'\n      );\n    }\n\n    this._content = content;\n    this._contentType = contentType;\n    this._messageType = messageType;\n    this._voiceEventSid = voiceEventSid;\n  }\n\n  /**\n   * Get the content body of the message.\n   * @returns\n   * - A string representing the content body of the message.\n   */\n  getContent(): any {\n    return this._content;\n  }\n\n  /**\n   * Get the MIME type for the message.\n   * @returns\n   * - A {@link (CallMessage:namespace).ContentType}.\n   */\n  getContentType(): CallMessage.ContentType {\n    return this._contentType;\n  }\n\n  /**\n   * Get the message type.\n   * @returns\n   * - A {@link (CallMessage:namespace).MessageType}.\n   */\n  getMessageType(): CallMessage.MessageType {\n    return this._messageType;\n  }\n\n  /**\n   * Get the message SID.\n   * @returns\n   * - A string representing the message SID.\n   * - `undefined` if the call information has not yet been received from the\n   *   native layer.\n   */\n  getSid(): string | undefined {\n    return this._voiceEventSid;\n  }\n}\n\n/**\n * Namespace for enumerations and types used by\n * {@link (CallMessage:class) | CallMessage objects}.\n *\n * @remarks\n *  - See also the {@link (CallMessage:class) | CallMessage class}.\n *\n * @public\n */\nexport namespace CallMessage {\n  export enum MessageType {\n    'UserDefinedMessage' = Constants.UserDefinedMessage,\n  }\n\n  export enum ContentType {\n    'ApplicationJson' = Constants.ApplicationJson,\n  }\n}\n"]}