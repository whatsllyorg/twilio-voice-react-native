{"version":3,"sources":["Voice.tsx"],"names":["Voice","EventEmitter","constructor","nativeVoiceEvent","type","handler","_nativeEventHandler","Error","Constants","VoiceEventTypeValueIncomingCallInvite","callInvite","callInviteInfo","CallInvite","State","Pending","emit","Event","VoiceEventError","error","code","message","VoiceEventRegistered","Registered","VoiceEventUnregistered","Unregistered","VoiceEventAudioDevicesUpdated","audioDevices","audioDeviceInfos","selectedDevice","selectedDeviceInfo","map","audioDeviceInfo","AudioDevice","undefined","AudioDevicesUpdated","_handleError","_handleCallInvite","_handleRegistered","_handleUnregistered","_handleAudioDevicesUpdated","NativeEventEmitter","addListener","ScopeVoice","_handleNativeEvent","_connect_android","token","params","callInfo","NativeModule","voice_connect_android","Call","_connect_ios","contactHandle","parsedContactHandle","voice_connect_ios","connect","InvalidArgumentError","key","value","Object","entries","Platform","OS","UnsupportedPlatformError","getVersion","voice_getVersion","getDeviceToken","voice_getDeviceToken","getCalls","callInfos","voice_getCalls","callsMap","Map","uuid","getCallInvites","callInviteInfos","voice_getCallInvites","callInvitesMap","register","voice_register","unregister","voice_unregister","getAudioDevices","voice_getAudioDevices","showAvRoutePickerView","voice_showNativeAvRoutePicker","initializePushRegistry","voice_initializePushRegistry","setCallKitConfiguration","configuration","voice_setCallKitConfiguration","Listener"],"mappings":";;;;;;;AAOA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;AA+LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,KAAN,SAAoBC,0BAApB,CAAiC;AACtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAME;AACF;AACA;AACA;AACEC,EAAAA,WAAW,GAAG;AACZ;;AADY;;AAAA,gDAgEgBC,gBAAD,IAAwC;AACnE,YAAM;AAAEC,QAAAA;AAAF,UAAWD,gBAAjB;AAEA,YAAME,OAAO,GAAG,KAAKC,mBAAL,CAAyBF,IAAzB,CAAhB;;AACA,UAAI,OAAOC,OAAP,KAAmB,WAAvB,EAAoC;AAClC,cAAM,IAAIE,KAAJ,CACH,6DAA4DH,IAAK,IAD9D,CAAN;AAGD;;AAEDC,MAAAA,OAAO,CAACF,gBAAD,CAAP;AACD,KA3Ea;;AAAA,+CAkFeA,gBAAD,IAAwC;AAClE,UACEA,gBAAgB,CAACC,IAAjB,KAA0BI,qBAAUC,qCADtC,EAEE;AACA,cAAM,IAAIF,KAAJ,CACJ,0DACG,IAAGJ,gBAAgB,CAACC,IAAK,IAFxB,CAAN;AAID;;AAED,YAAM;AAAEM,QAAAA,UAAU,EAAEC;AAAd,UAAiCR,gBAAvC;AAEA,YAAMO,UAAU,GAAG,IAAIE,sBAAJ,CAAeD,cAAf,EAA+BC,uBAAWC,KAAX,CAAiBC,OAAhD,CAAnB;AAEA,WAAKC,IAAL,CAAUf,KAAK,CAACgB,KAAN,CAAYJ,UAAtB,EAAkCF,UAAlC;AACD,KAjGa;;AAAA,0CAwGUP,gBAAD,IAAwC;AAC7D,UAAIA,gBAAgB,CAACC,IAAjB,KAA0BI,qBAAUS,eAAxC,EAAyD;AACvD,cAAM,IAAIV,KAAJ,CACJ,qDACG,IAAGJ,gBAAgB,CAACC,IAAK,IAFxB,CAAN;AAID;;AAED,YAAM;AACJc,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAF;AAAQC,UAAAA;AAAR;AADH,UAEFjB,gBAFJ;AAGA,YAAMe,KAAK,GAAG,mCAAqBE,OAArB,EAA8BD,IAA9B,CAAd;AACA,WAAKJ,IAAL,CAAUf,KAAK,CAACgB,KAAN,CAAYT,KAAtB,EAA6BW,KAA7B;AACD,KArHa;;AAAA,+CA2Hef,gBAAD,IAAwC;AAClE,UAAIA,gBAAgB,CAACC,IAAjB,KAA0BI,qBAAUa,oBAAxC,EAA8D;AAC5D,cAAM,IAAId,KAAJ,CACJ,qDACG,IAAGJ,gBAAgB,CAACC,IAAK,IAFxB,CAAN;AAID;;AAED,WAAKW,IAAL,CAAUf,KAAK,CAACgB,KAAN,CAAYM,UAAtB;AACD,KApIa;;AAAA,iDA0IiBnB,gBAAD,IAAwC;AACpE,UAAIA,gBAAgB,CAACC,IAAjB,KAA0BI,qBAAUe,sBAAxC,EAAgE;AAC9D,cAAM,IAAIhB,KAAJ,CACJ,qDACG,IAAGJ,gBAAgB,CAACC,IAAK,IAFxB,CAAN;AAID;;AAED,WAAKW,IAAL,CAAUf,KAAK,CAACgB,KAAN,CAAYQ,YAAtB;AACD,KAnJa;;AAAA,wDA0JwBrB,gBAAD,IAAwC;AAC3E,UAAIA,gBAAgB,CAACC,IAAjB,KAA0BI,qBAAUiB,6BAAxC,EAAuE;AACrE,cAAM,IAAIlB,KAAJ,CACJ,mEACG,IAAGJ,gBAAgB,CAACC,IAAK,IAFxB,CAAN;AAID;;AAED,YAAM;AACJsB,QAAAA,YAAY,EAAEC,gBADV;AAEJC,QAAAA,cAAc,EAAEC;AAFZ,UAGF1B,gBAHJ;AAKA,YAAMuB,YAAY,GAAGC,gBAAgB,CAACG,GAAjB,CAClBC,eAAD,IACE,IAAIC,wBAAJ,CAAgBD,eAAhB,CAFiB,CAArB;AAKA,YAAMH,cAAc,GAClB,OAAOC,kBAAP,KAA8B,WAA9B,IAA6CA,kBAAkB,KAAK,IAApE,GACI,IAAIG,wBAAJ,CAAgBH,kBAAhB,CADJ,GAEII,SAHN;AAKA,WAAKlB,IAAL,CAAUf,KAAK,CAACgB,KAAN,CAAYkB,mBAAtB,EAA2CR,YAA3C,EAAyDE,cAAzD;AACD,KAlLa;;AAGZ,SAAKtB,mBAAL,GAA2B;AACzB;AACN;AACA;AACM,OAACE,qBAAUS,eAAX,GAA6B,KAAKkB,YAJT;;AAMzB;AACN;AACA;AACM,OAAC3B,qBAAUC,qCAAX,GAAmD,KAAK2B,iBAT/B;;AAWzB;AACN;AACA;AACM,OAAC5B,qBAAUa,oBAAX,GAAkC,KAAKgB,iBAdd;AAezB,OAAC7B,qBAAUe,sBAAX,GAAoC,KAAKe,mBAfhB;;AAiBzB;AACN;AACA;AACM,OAAC9B,qBAAUiB,6BAAX,GACE,KAAKc;AArBkB,KAA3B;;AAwBAC,+BAAmBC,WAAnB,CACEjC,qBAAUkC,UADZ,EAEE,KAAKC,kBAFP;AAID;AAED;AACF;AACA;;;AACgC,QAAhBC,gBAAgB,CAACC,KAAD,EAAgBC,MAAhB,EAA0C;AACtE,UAAMC,QAAQ,GAAG,MAAMC,qBAAaC,qBAAb,CAAmCJ,KAAnC,EAA0CC,MAA1C,CAAvB;AACA,WAAO,IAAII,UAAJ,CAASH,QAAT,CAAP;AACD;AAED;AACF;AACA;;;AAC4B,QAAZI,YAAY,CACxBN,KADwB,EAExBC,MAFwB,EAGxBM,aAHwB,EAIxB;AACA,UAAMC,mBAAmB,GACvBD,aAAa,KAAK,EAAlB,GAAuB,iBAAvB,GAA2CA,aAD7C;AAEA,UAAML,QAAQ,GAAG,MAAMC,qBAAaM,iBAAb,CACrBT,KADqB,EAErBC,MAFqB,EAGrBO,mBAHqB,CAAvB;AAKA,WAAO,IAAIH,UAAJ,CAASH,QAAT,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AAqHE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,QAAPQ,OAAO,CACXV,KADW,EAEX;AACEO,IAAAA,aAAa,GAAG,iBADlB;AAEEN,IAAAA,MAAM,GAAG;AAFX,MAG0B,EALf,EAMI;AACf,QAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,YAAM,IAAIW,0CAAJ,CACJ,4CADI,CAAN;AAGD;;AAED,QAAI,OAAOJ,aAAP,KAAyB,QAA7B,EAAuC;AACrC,YAAM,IAAII,0CAAJ,CACJ,mEACE,YAFE,CAAN;AAID;;AAED,QAAI,OAAOV,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,YAAM,IAAIU,0CAAJ,CACJ,mEADI,CAAN;AAGD;;AAED,SAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAed,MAAf,CAA3B,EAAmD;AACjD,UAAI,OAAOY,KAAP,KAAiB,QAArB,EAA+B;AAC7B,cAAM,IAAIF,0CAAJ,CACH,gCAA+BC,GAAI,2BADhC,CAAN;AAGD;AACF;;AAED,YAAQI,iBAASC,EAAjB;AACE,WAAK,KAAL;AACE,eAAO,KAAKX,YAAL,CAAkBN,KAAlB,EAAyBC,MAAzB,EAAiCM,aAAjC,CAAP;;AACF,WAAK,SAAL;AACE,eAAO,KAAKR,gBAAL,CAAsBC,KAAtB,EAA6BC,MAA7B,CAAP;;AACF;AACE,cAAM,IAAIiB,kDAAJ,CACH,yBAAwBF,iBAASC,EAAG,iCADjC,CAAN;AANJ;AAUD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEE,EAAAA,UAAU,GAAoB;AAC5B,WAAOhB,qBAAaiB,gBAAb,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,cAAc,GAAoB;AAChC,WAAOlB,qBAAamB,oBAAb,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACgB,QAARC,QAAQ,GAAqC;AACjD,UAAMC,SAAS,GAAG,MAAMrB,qBAAasB,cAAb,EAAxB;AACA,UAAMC,QAAQ,GAAG,IAAIC,GAAJ,CACfH,SAAS,CAACvC,GAAV,CAAeiB,QAAD,IAA8B,CAC1CA,QAAQ,CAAC0B,IADiC,EAE1C,IAAIvB,UAAJ,CAASH,QAAT,CAF0C,CAA5C,CADe,CAAjB;AAMA,WAAOwB,QAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACsB,QAAdG,cAAc,GAA2C;AAC7D,UAAMC,eAAe,GAAG,MAAM3B,qBAAa4B,oBAAb,EAA9B;AACA,UAAMC,cAAc,GAAG,IAAIL,GAAJ,CACrBG,eAAe,CAAC7C,GAAhB,CAAqBnB,cAAD,IAA0C,CAC5DA,cAAc,CAAC8D,IAD6C,EAE5D,IAAI7D,sBAAJ,CAAeD,cAAf,EAA+BC,uBAAWC,KAAX,CAAiBC,OAAhD,CAF4D,CAA9D,CADqB,CAAvB;AAMA,WAAO+D,cAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,QAAQ,CAACjC,KAAD,EAA+B;AACrC,WAAOG,qBAAa+B,cAAb,CAA4BlC,KAA5B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEmC,EAAAA,UAAU,CAACnC,KAAD,EAA+B;AACvC,WAAOG,qBAAaiC,gBAAb,CAA8BpC,KAA9B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACuB,QAAfqC,eAAe,GAGlB;AACD,UAAM;AACJxD,MAAAA,YAAY,EAAEC,gBADV;AAEJC,MAAAA,cAAc,EAAEC;AAFZ,QAGF,MAAMmB,qBAAamC,qBAAb,EAHV;AAKA,UAAMzD,YAAY,GAAGC,gBAAgB,CAACG,GAAjB,CAClBC,eAAD,IACE,IAAIC,wBAAJ,CAAgBD,eAAhB,CAFiB,CAArB;AAKA,UAAMH,cAAc,GAClB,OAAOC,kBAAP,KAA8B,WAA9B,GACI,IAAIG,wBAAJ,CAAgBH,kBAAhB,CADJ,GAEII,SAHN;AAKA,WAAOL,cAAc,GAAG;AAAEF,MAAAA,YAAF;AAAgBE,MAAAA;AAAhB,KAAH,GAAsC;AAAEF,MAAAA;AAAF,KAA3D;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE0D,EAAAA,qBAAqB,GAAkB;AACrC,WAAOpC,qBAAaqC,6BAAb,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC8B,QAAtBC,sBAAsB,GAAkB;AAC5C,YAAQzB,iBAASC,EAAjB;AACE,WAAK,KAAL;AACE,eAAOd,qBAAauC,4BAAb,EAAP;;AACF;AACE,cAAM,IAAIxB,kDAAJ,CACH,yBAAwBF,iBAASC,EAAG,0CADjC,CAAN;AAJJ;AAQD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC+B,QAAvB0B,uBAAuB,CAC3BC,aAD2B,EAEZ;AACf,YAAQ5B,iBAASC,EAAjB;AACE,WAAK,KAAL;AACE,eAAOd,qBAAa0C,6BAAb,CAA2CD,aAA3C,CAAP;;AACF;AACE,cAAM,IAAI1B,kDAAJ,CACH,yBAAwBF,iBAASC,EAAG,0CADjC,CAAN;AAJJ;AAQD;;AAxcqC;AA2cxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAEE;AACF;AACA;MAoBc9C,K;;aAAAA,K;AAAAA,IAAAA,K;AAAAA,IAAAA,K;AAAAA,IAAAA,K;AAAAA,IAAAA,K;AAAAA,IAAAA,K;KAAAA,K,KAAAA,K;;;;;4BAwDK2E,Q,KAAAA,Q,UAAAA,Q,YAAAA,Q;GA/EF3F,K,qBAAAA,K","sourcesContent":["/**\n * Copyright Â© 2022 Twilio, Inc. All rights reserved. Licensed under the Twilio\n * license.\n *\n * See LICENSE in the project root for license information.\n */\n\nimport { EventEmitter } from 'eventemitter3';\nimport { AudioDevice } from './AudioDevice';\nimport { Call } from './Call';\nimport { CallInvite } from './CallInvite';\nimport { NativeEventEmitter, NativeModule, Platform } from './common';\nimport { Constants } from './constants';\nimport { InvalidArgumentError } from './error/InvalidArgumentError';\nimport type { TwilioError } from './error/TwilioError';\nimport { UnsupportedPlatformError } from './error/UnsupportedPlatformError';\nimport { constructTwilioError } from './error/utility';\nimport type { NativeAudioDeviceInfo } from './type/AudioDevice';\nimport type { NativeCallInfo } from './type/Call';\nimport type { NativeCallInviteInfo } from './type/CallInvite';\nimport type { CallKit } from './type/CallKit';\nimport type { CustomParameters, Uuid } from './type/common';\nimport type { NativeVoiceEvent, NativeVoiceEventType } from './type/Voice';\n\n/**\n * Defines strict typings for all events emitted by {@link (Voice:class)\n * | Voice objects}.\n *\n * @remarks\n * Note that the `on` function is an alias for the `addListener` function.\n * They share identical functionality and either may be used interchangeably.\n *\n * - See also the {@link (Voice:class) | Voice class}.\n * - See also the {@link (Voice:namespace) | Voice namespace}.\n *\n * @public\n */\nexport declare interface Voice {\n  /**\n   * ------------\n   * Emit Typings\n   * ------------\n   */\n\n  /** @internal */\n  emit(\n    voiceEvent: Voice.Event.AudioDevicesUpdated,\n    audioDevices: AudioDevice[],\n    selectedDevice?: AudioDevice\n  ): boolean;\n\n  /** @internal */\n  emit(voiceEvent: Voice.Event.CallInvite, callInvite: CallInvite): boolean;\n\n  /** @internal */\n  emit(voiceEvent: Voice.Event.Error, error: TwilioError): boolean;\n\n  /** @internal */\n  emit(voiceEvent: Voice.Event.Registered): boolean;\n\n  /** @internal */\n  emit(voiceEvent: Voice.Event.Unregistered): boolean;\n\n  /** @internal */\n  emit(voiceEvent: Voice.Event, ...args: any[]): boolean;\n\n  /**\n   * ----------------\n   * Listener Typings\n   * ----------------\n   */\n\n  /**\n   * Audio devices updated event. Raised when the list of audio devices changes.\n   *\n   * @example\n   * ```typescript\n   * voice.addListener(Voice.Event.AudioDevicesUpdated, () => {\n   *   // the list of available audio devices has changed and/or the selected\n   *   // audio device has been changed\n   * });\n   * ```\n   *\n   * @param audioDevicesUpdatedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    audioDevicesUpdatedEvent: Voice.Event.AudioDevicesUpdated,\n    listener: Voice.Listener.AudioDevicesUpdated\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addListener:1)} */\n  on(\n    audioDevicesUpdatedEvent: Voice.Event.AudioDevicesUpdated,\n    listener: Voice.Listener.AudioDevicesUpdated\n  ): this;\n\n  /**\n   * Call invite event. Raised when an incoming call invite is received.\n   *\n   * @example\n   * ```typescript\n   * voice.addListener(Voice.Event.CallInvite, (callInvite: CallInvite) => {\n   *   // handle the incoming call invite\n   * });\n   * ```\n   *\n   * @param callInviteEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    callInviteEvent: Voice.Event.CallInvite,\n    listener: Voice.Listener.CallInvite\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addListener:2)} */\n  on(\n    callInviteEvent: Voice.Event.CallInvite,\n    listener: Voice.Listener.CallInvite\n  ): this;\n\n  /**\n   * Error event. Raised when the SDK encounters an error.\n   *\n   * @example\n   * ```typescript\n   * voice.addListener(Voice.Event.Error, (error: TwilioError.GenericError) => {\n   *   // handle a generic Voice SDK error\n   * });\n   * ```\n   *\n   * @param errorEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    errorEvent: Voice.Event.Error,\n    listener: Voice.Listener.Error\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addListener:3)} */\n  on(errorEvent: Voice.Event.Error, listener: Voice.Listener.Error): this;\n\n  /**\n   * Registered event. Raised when the SDK is registered for incoming calls.\n   *\n   * @example\n   * ```typescript\n   * voice.addListener(Voice.Event.Registered, () => {\n   *   // handle successful registration for incoming calls\n   * });\n   * ```\n   *\n   * @param registeredEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    registeredEvent: Voice.Event.Registered,\n    listener: Voice.Listener.Registered\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addListener:4)} */\n  on(\n    registeredEvent: Voice.Event.Registered,\n    listener: Voice.Listener.Registered\n  ): this;\n\n  /**\n   * Unregistered event. Raised when the SDK is unregistered for incoming calls.\n   *\n   * @example\n   * ```typescript\n   * voice.addListener(Voice.Event.Unregistered, () => {\n   *   // handle successful unregistration for incoming calls\n   * });\n   * ```\n   *\n   * @param unregisteredEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    unregisteredEvent: Voice.Event.Unregistered,\n    listener: Voice.Listener.Unregistered\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addListener:5)} */\n  on(\n    unregisteredEvent: Voice.Event.Unregistered,\n    listener: Voice.Listener.Unregistered\n  ): this;\n\n  /**\n   * Generic event listener typings.\n   * @param voiceEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(voiceEvent: Voice.Event, listener: Voice.Listener.Generic): this;\n  /** {@inheritDoc (Voice:interface).(addListener:6)} */\n  on(voiceEvent: Voice.Event, listener: Voice.Listener.Generic): this;\n}\n\n/**\n * Main entry-point of the Voice SDK. Provides access to the entire feature-set\n * of the library.\n *\n * @example\n * Usage:\n * ```\n * const token = '...';\n *\n * const voice = new Voice();\n *\n * voice.on(Voice.Event.CallInvite, (callInvite: CallInvite) => {\n *   callInvite.accept();\n * });\n *\n * voice.register(token);\n * ```\n *\n * @remarks\n *  - See also the {@link (Voice:namespace).Event} enum for events emitted by\n *    `Voice` objects.\n *  - See also the {@link (Voice:interface) | Voice interface} for events\n *    emitted by this class and associated types.\n *  - See also the {@link (Voice:namespace) | Voice namespace} for types and\n *    enumerations used by this class.\n *\n * @public\n */\nexport class Voice extends EventEmitter {\n  /**\n   * Handlers for native voice events. Set upon construction so we can\n   * dynamically bind events to handlers.\n   *\n   * @privateRemarks\n   * This is done by the constructor so this mapping isn't made every time the\n   * {@link (Voice:class)._handleNativeEvent} function is invoked.\n   */\n  private _nativeEventHandler: Record<\n    NativeVoiceEventType,\n    (voiceEvent: NativeVoiceEvent) => void\n  >;\n\n  /**\n   * Main entry-point of the Voice SDK. Provides access to the entire\n   * feature-set of the library.\n   */\n  constructor() {\n    super();\n\n    this._nativeEventHandler = {\n      /**\n       * Common\n       */\n      [Constants.VoiceEventError]: this._handleError,\n\n      /**\n       * Call Invite\n       */\n      [Constants.VoiceEventTypeValueIncomingCallInvite]: this._handleCallInvite,\n\n      /**\n       * Registration\n       */\n      [Constants.VoiceEventRegistered]: this._handleRegistered,\n      [Constants.VoiceEventUnregistered]: this._handleUnregistered,\n\n      /**\n       * Audio Devices\n       */\n      [Constants.VoiceEventAudioDevicesUpdated]:\n        this._handleAudioDevicesUpdated,\n    };\n\n    NativeEventEmitter.addListener(\n      Constants.ScopeVoice,\n      this._handleNativeEvent\n    );\n  }\n\n  /**\n   * Connect for devices on Android platforms.\n   */\n  private async _connect_android(token: string, params: CustomParameters) {\n    const callInfo = await NativeModule.voice_connect_android(token, params);\n    return new Call(callInfo);\n  }\n\n  /**\n   * Connect for devices on iOS platforms.\n   */\n  private async _connect_ios(\n    token: string,\n    params: CustomParameters,\n    contactHandle: string\n  ) {\n    const parsedContactHandle =\n      contactHandle === '' ? 'Default Contact' : contactHandle;\n    const callInfo = await NativeModule.voice_connect_ios(\n      token,\n      params,\n      parsedContactHandle\n    );\n    return new Call(callInfo);\n  }\n\n  /**\n   * Intermediary event handler for `Voice`-level events. Ensures that the type\n   * of the incoming event is expected and invokes the proper event listener.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleNativeEvent = (nativeVoiceEvent: NativeVoiceEvent) => {\n    const { type } = nativeVoiceEvent;\n\n    const handler = this._nativeEventHandler[type];\n    if (typeof handler === 'undefined') {\n      throw new Error(\n        `Unknown voice event type received from the native layer: \"${type}\".`\n      );\n    }\n\n    handler(nativeVoiceEvent);\n  };\n\n  /**\n   * Call invite handler. Creates a {@link (CallInvite:class)} from the info\n   * raised by the native layer and emits it.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleCallInvite = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (\n      nativeVoiceEvent.type !== Constants.VoiceEventTypeValueIncomingCallInvite\n    ) {\n      throw new Error(\n        'Incorrect \"voice#callInvite\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    const { callInvite: callInviteInfo } = nativeVoiceEvent;\n\n    const callInvite = new CallInvite(callInviteInfo, CallInvite.State.Pending);\n\n    this.emit(Voice.Event.CallInvite, callInvite);\n  };\n\n  /**\n   * Error event handler. Creates an error from the namespace\n   * {@link TwilioErrors} from the info raised by the native layer and emits it.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleError = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventError) {\n      throw new Error(\n        'Incorrect \"voice#error\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    const {\n      error: { code, message },\n    } = nativeVoiceEvent;\n    const error = constructTwilioError(message, code);\n    this.emit(Voice.Event.Error, error);\n  };\n\n  /**\n   * Registered event handler. Emits a\n   * {@link (Voice:namespace).Event.Registered} event.\n   */\n  private _handleRegistered = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventRegistered) {\n      throw new Error(\n        'Incorrect \"voice#error\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    this.emit(Voice.Event.Registered);\n  };\n\n  /**\n   * Unregistered event handler. Emits a\n   * {@link (Voice:namespace).Event.Unregistered} event.\n   */\n  private _handleUnregistered = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventUnregistered) {\n      throw new Error(\n        'Incorrect \"voice#error\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    this.emit(Voice.Event.Unregistered);\n  };\n\n  /**\n   * Audio devices updated event handler. Generates a new list of\n   * {@link (AudioDevice:class) | AudioDevice objects} and emits it.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleAudioDevicesUpdated = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventAudioDevicesUpdated) {\n      throw new Error(\n        'Incorrect \"voice#audioDevicesUpdated\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    const {\n      audioDevices: audioDeviceInfos,\n      selectedDevice: selectedDeviceInfo,\n    } = nativeVoiceEvent;\n\n    const audioDevices = audioDeviceInfos.map(\n      (audioDeviceInfo: NativeAudioDeviceInfo) =>\n        new AudioDevice(audioDeviceInfo)\n    );\n\n    const selectedDevice =\n      typeof selectedDeviceInfo !== 'undefined' && selectedDeviceInfo !== null\n        ? new AudioDevice(selectedDeviceInfo)\n        : undefined;\n\n    this.emit(Voice.Event.AudioDevicesUpdated, audioDevices, selectedDevice);\n  };\n\n  /**\n   * Create an outgoing call.\n   *\n   * @remarks\n   * Note that the resolution of the returned `Promise` does not imply any call\n   * event occurring, such as answered or rejected.\n   * The `contactHandle` parameter is only required for iOS apps. Currently the\n   * parameter does have any effect on Android apps and can be ignored.\n   * `Default Contact` will appear in the iOS call history if the value is empty\n   * or not provided.\n   *\n   * @param token - A Twilio Access Token, usually minted by an\n   * authentication-gated endpoint using a Twilio helper library.\n   * @param options - Connect options.\n   *  See {@link (Voice:namespace).ConnectOptions}.\n   *\n   * @returns\n   * A `Promise` that\n   *  - Resolves with a call when the call is created.\n   *  - Rejects:\n   *    * When a call is not able to be created on the native layer.\n   *    * With an {@link TwilioErrors.InvalidArgumentError} when invalid\n   *      arguments are passed.\n   */\n  async connect(\n    token: string,\n    {\n      contactHandle = 'Default Contact',\n      params = {},\n    }: Voice.ConnectOptions = {}\n  ): Promise<Call> {\n    if (typeof token !== 'string') {\n      throw new InvalidArgumentError(\n        'Argument \"token\" must be of type \"string\".'\n      );\n    }\n\n    if (typeof contactHandle !== 'string') {\n      throw new InvalidArgumentError(\n        'Optional argument \"contactHandle\" must be undefined or of type' +\n          ' \"string\".'\n      );\n    }\n\n    if (typeof params !== 'object') {\n      throw new InvalidArgumentError(\n        'Optional argument \"params\" must be undefined or of type \"object\".'\n      );\n    }\n\n    for (const [key, value] of Object.entries(params)) {\n      if (typeof value !== 'string') {\n        throw new InvalidArgumentError(\n          `Voice.ConnectOptions.params[\"${key}\"] must be of type string`\n        );\n      }\n    }\n\n    switch (Platform.OS) {\n      case 'ios':\n        return this._connect_ios(token, params, contactHandle);\n      case 'android':\n        return this._connect_android(token, params);\n      default:\n        throw new UnsupportedPlatformError(\n          `Unsupported platform \"${Platform.OS}\". Expected \"android\" or \"ios\".`\n        );\n    }\n  }\n\n  /**\n   * Get the version of the native SDK. Note that this is not the version of the\n   * React Native SDK, this is the version of the mobile SDK that the RN SDK is\n   * utilizing.\n   * @returns\n   * A `Promise` that\n   *  - Resolves with a string representing the version of the native SDK.\n   */\n  getVersion(): Promise<string> {\n    return NativeModule.voice_getVersion();\n  }\n\n  /**\n   * Get the Device token from the native layer.\n   * @returns a Promise that resolves with a string representing the Device\n   * token.\n   */\n  getDeviceToken(): Promise<string> {\n    return NativeModule.voice_getDeviceToken();\n  }\n\n  /**\n   * Get a list of existing calls, ongoing and pending. This will not return any\n   * call that has finished.\n   * @returns\n   * A `Promise` that\n   *  - Resolves with a mapping of `Uuid`s to {@link (Call:class)}s.\n   */\n  async getCalls(): Promise<ReadonlyMap<Uuid, Call>> {\n    const callInfos = await NativeModule.voice_getCalls();\n    const callsMap = new Map<Uuid, Call>(\n      callInfos.map((callInfo: NativeCallInfo) => [\n        callInfo.uuid,\n        new Call(callInfo),\n      ])\n    );\n    return callsMap;\n  }\n\n  /**\n   * Get a list of pending call invites.\n   *\n   * @remarks\n   * This list will not contain any call invites that have been \"settled\"\n   * (answered or rejected).\n   *\n   * @returns\n   * A `Promise` that\n   *  - Resolves with a mapping of `Uuid`s to {@link (CallInvite:class)}s.\n   */\n  async getCallInvites(): Promise<ReadonlyMap<Uuid, CallInvite>> {\n    const callInviteInfos = await NativeModule.voice_getCallInvites();\n    const callInvitesMap = new Map<Uuid, CallInvite>(\n      callInviteInfos.map((callInviteInfo: NativeCallInviteInfo) => [\n        callInviteInfo.uuid,\n        new CallInvite(callInviteInfo, CallInvite.State.Pending),\n      ])\n    );\n    return callInvitesMap;\n  }\n\n  /**\n   * Register this device for incoming calls.\n   * @param token - A Twilio Access Token.\n   * @returns\n   * A `Promise` that\n   *  - Resolves when the device has been registered.\n   */\n  register(token: string): Promise<void> {\n    return NativeModule.voice_register(token);\n  }\n\n  /**\n   * Unregister this device for incoming calls.\n   * @param token - A Twilio Access Token.\n   * @returns\n   * A `Promise` that\n   *  - Resolves when the device has been unregistered.\n   */\n  unregister(token: string): Promise<void> {\n    return NativeModule.voice_unregister(token);\n  }\n\n  /**\n   * Get audio device information from the native layer.\n   * @returns\n   * A `Promise` that\n   *  - Resolves with a list of the native device's audio devices and the\n   *    currently selected device.\n   */\n  async getAudioDevices(): Promise<{\n    audioDevices: AudioDevice[];\n    selectedDevice?: AudioDevice;\n  }> {\n    const {\n      audioDevices: audioDeviceInfos,\n      selectedDevice: selectedDeviceInfo,\n    } = await NativeModule.voice_getAudioDevices();\n\n    const audioDevices = audioDeviceInfos.map(\n      (audioDeviceInfo: NativeAudioDeviceInfo) =>\n        new AudioDevice(audioDeviceInfo)\n    );\n\n    const selectedDevice =\n      typeof selectedDeviceInfo !== 'undefined'\n        ? new AudioDevice(selectedDeviceInfo)\n        : undefined;\n\n    return selectedDevice ? { audioDevices, selectedDevice } : { audioDevices };\n  }\n\n  /**\n   * Show the native AV route picker.\n   *\n   * @remarks\n   * Unsupported platforms:\n   * - Android\n   *\n   * This API is specific to iOS and unavailable in Android. If this API is\n   * invoked on Android, there will be no operation and the returned `Promise`\n   * will immediately resolve with `null`.\n   *\n   * @returns\n   * A `Promise` that\n   *  - Resolves when the AV Route Picker View is shown.\n   */\n  showAvRoutePickerView(): Promise<void> {\n    return NativeModule.voice_showNativeAvRoutePicker();\n  }\n\n  /**\n   * Initialize a Push Registry instance inside the SDK for handling\n   * PushKit device token updates and receiving push notifications.\n   *\n   * @remarks\n   * Unsupported platforms:\n   * - Android\n   *\n   * This API is specific to iOS and unavailable in Android.\n   * Use this method if the application does not have an iOS PushKit\n   * module and wishes to delegate the event handling to the SDK.\n   * Call this method upon launching the app to guarantee that incoming\n   * call push notifications will be surfaced to the users, especially when\n   * the app is not running in the foreground.\n   *\n   * @return\n   * A `Promise` that\n   *  - Resolves when the initialization is done.\n   */\n  async initializePushRegistry(): Promise<void> {\n    switch (Platform.OS) {\n      case 'ios':\n        return NativeModule.voice_initializePushRegistry();\n      default:\n        throw new UnsupportedPlatformError(\n          `Unsupported platform \"${Platform.OS}\". This method is only supported on iOS.`\n        );\n    }\n  }\n\n  /**\n   * Custom iOS CallKit configuration.\n   *\n   * @param configuration - iOS CallKit configuration options.\n   *\n   * @remarks\n   * Unsupported platforms:\n   * - Android\n   *\n   * See {@link CallKit} for more information.\n   *\n   * @returns\n   * A `Promise` that\n   *  - Resolves when the configuration has been applied.\n   *  - Rejects if the configuration is unable to be applied.\n   */\n  async setCallKitConfiguration(\n    configuration: CallKit.ConfigurationOptions\n  ): Promise<void> {\n    switch (Platform.OS) {\n      case 'ios':\n        return NativeModule.voice_setCallKitConfiguration(configuration);\n      default:\n        throw new UnsupportedPlatformError(\n          `Unsupported platform \"${Platform.OS}\". This method is only supported on iOS.`\n        );\n    }\n  }\n}\n\n/**\n * Provides enumerations and types used by {@link (Voice:class)\n * | Voice objects}.\n *\n * @remarks\n * - See also the {@link (Voice:class) | Voice class}.\n * - See also the {@link (Voice:interface) | Voice interface}.\n *\n * @public\n */\nexport namespace Voice {\n  /**\n   * Options to pass to the {@link (Voice:class).connect} method.\n   */\n  export type ConnectOptions = {\n    /**\n     * Custom parameters to send to the TwiML Application.\n     */\n    params?: Record<string, string>;\n    /**\n     * A CallKit display name that will show in the call history as the contact\n     * handle.\n     *\n     * @remarks\n     * Unsupported platforms:\n     * - Android\n     */\n    contactHandle?: string;\n  };\n\n  /**\n   * Enumeration of all event strings emitted by {@link (Voice:class)} objects.\n   */\n  export enum Event {\n    /**\n     * Raised when there is a change in available audio devices.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:1)\n     * | Voice.addListener(AudioDevicesUpdated)}.\n     */\n    'AudioDevicesUpdated' = 'audioDevicesUpdated',\n\n    /**\n     * Raised when there is an incoming call invite.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:2)\n     * | Voice.addListener(CallInvite)}.\n     */\n    'CallInvite' = 'callInvite',\n\n    /**\n     * Raised when the SDK encounters an error.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:3)\n     * | Voice.addListener(Error)}.\n     */\n    'Error' = 'error',\n\n    /**\n     * Raised when the SDK is registered for incoming calls.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:4)\n     * | Voice.addListener(Registered)}.\n     */\n    'Registered' = 'registered',\n\n    /**\n     * Raised when the SDK is unregistered for incoming calls.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:5)\n     * | Voice.addListener(Unregistered)}.\n     */\n    'Unregistered' = 'unregistered',\n  }\n\n  /**\n   * Listener types for all events emitted by a {@link (Voice:class)\n   * | Voice object.}\n   */\n  export namespace Listener {\n    /**\n     * Audio devices updated event listener. This should be the function\n     * signature of an event listener bound to the\n     * {@link (Voice:namespace).Event.AudioDevicesUpdated} event.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:1)}.\n     */\n    export type AudioDevicesUpdated = (\n      audioDevices: AudioDevice[],\n      selectedDevice?: AudioDevice\n    ) => void;\n\n    /**\n     * Call invite event listener. This should be the function signature of an\n     * event listener bound to the\n     * {@link (Voice:namespace).Event.CallInvite} event.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:2)}.\n     */\n    export type CallInvite = (callInvite: CallInvite) => void;\n\n    /**\n     * Error event listener. This should be the function signature of an event\n     * listener bound to the\n     * {@link (Voice:namespace).Event.Error} event.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:3)}.\n     *\n     * See {@link TwilioErrors} for all error classes.\n     */\n    export type Error = (error: TwilioError) => void;\n\n    /**\n     * Registered event listener. This should be the function signature of an\n     * event listener bound to the\n     * {@link (Voice:namespace).Event.Registered} event.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:4)}.\n     */\n    export type Registered = () => void;\n\n    /**\n     * Unregistered event listener. This should be the function signature of an\n     * event listener bound to the\n     * {@link (Voice:namespace).Event.Unregistered} event.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:5)}.\n     */\n    export type Unregistered = () => void;\n\n    /**\n     * Generic event listener. This should be the function signature of any\n     * event listener bound to any voice event.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:6)}.\n     */\n    export type Generic = (...args: any[]) => void;\n  }\n}\n"]}